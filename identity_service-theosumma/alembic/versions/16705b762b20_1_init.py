"""1 init

Revision ID: 16705b762b20
Revises: 
Create Date: 2025-03-18 00:28:08.362753

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision: str = '16705b762b20'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('countries',
                    sa.Column('country_id', sa.Integer(), nullable=False),
                    sa.Column('name', sa.String(), nullable=False),
                    sa.Column('code', sa.String(), nullable=False),
                    sa.Column('flag', sa.String(), nullable=False),
                    sa.Column('calling_code', sa.String(), nullable=False),
                    sa.PrimaryKeyConstraint('country_id')
                    )
    op.create_table('users',
                    sa.Column('user_id', sa.UUID(), nullable=False),
                    sa.Column('user_id_hash', sa.String(), nullable=True),
                    sa.Column('first_name', sa.String(), nullable=False),
                    sa.Column('last_name', sa.String(), nullable=False),
                    sa.Column('email', sa.String(), nullable=False),
                    sa.Column('profile_picture', sa.String(), nullable=True),
                    sa.Column('date_of_birth', sa.DateTime(timezone=True), nullable=True),
                    sa.Column('gender', sa.Enum('MALE', 'FEMALE', 'OTHER', name='usergender'), nullable=True),
                    sa.Column('country_id', sa.Integer(), nullable=True),
                    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('is_deleted', sa.Boolean(), nullable=False),
                    sa.Column('is_active', sa.Boolean(), nullable=False),
                    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
                    sa.Column('roles', sa.ARRAY(sa.Enum('SUBSCRIBER', 'MODERATOR', 'TESTER', 'ADMIN', name='userrole')),
                              nullable=False),
                    sa.ForeignKeyConstraint(['country_id'], ['countries.country_id'], name='users_country_id_fky',
                                            ondelete='SET NULL'),
                    sa.PrimaryKeyConstraint('user_id'),
                    sa.UniqueConstraint('email'),
                    sa.UniqueConstraint('user_id_hash')
                    )
    op.create_table('user_auth',
                    sa.Column('uid', sa.UUID(), nullable=False),
                    sa.Column('user_id', sa.UUID(), nullable=False),
                    sa.Column('auth_provider', sa.Enum('LOCAL', 'GOOGLE', 'FACEBOOK', 'APPLE', name='authprovider'),
                              nullable=False),
                    sa.Column('hashed_password', sa.String(), nullable=True),
                    sa.Column('verification_code', sa.String(), nullable=True),
                    sa.Column('verification_code_exp', sa.DateTime(timezone=True), nullable=True),
                    sa.Column('email_confirmed', sa.Boolean(), nullable=False),
                    sa.Column('failed_login_attempts', sa.Integer(), nullable=False),
                    sa.Column('lockout_until', sa.DateTime(timezone=True), nullable=True),
                    sa.Column('refresh_token', sa.String(), nullable=True),
                    sa.Column('refresh_token_exp', sa.DateTime(timezone=True), nullable=True),
                    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
                    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='user_auth_users_fky',
                                            ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('uid'),
                    sa.UniqueConstraint('user_id')
                    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_auth')
    op.drop_table('users')
    op.drop_table('countries')
    # drop enums
    op.execute("DROP TYPE IF EXISTS userrole;")
    op.execute("DROP TYPE IF EXISTS usergender;")
    op.execute("DROP TYPE IF EXISTS authprovider;")
    # ### end Alembic commands ###
